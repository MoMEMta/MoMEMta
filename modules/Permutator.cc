/*
 *  MoMEMta: a modular implementation of the Matrix Element Method
 *  Copyright (C) 2016  Universite catholique de Louvain (UCL), Belgium
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <algorithm>
#include <cmath>

#include <TMath.h>

#include <momemta/ParameterSet.h>
#include <momemta/Module.h>
#include <momemta/Types.h>

/** \brief Apply random permutations to a set of inputs
 *
 * Apply a random permutation on the input particles. Which permutation to apply
 * is determined by the value of a phase-space point \f$x\f$ generated by Cuba. For instance,
 * if the input is \f$(p1,p2)\f$, the output will be \f$(p_1,p_2)\f$ if \f$x \in [\,0, 0.5\,[\f$ and 
 * \f$(p_2,p_1)\f$ if \f$x \in [\,0.5, 1\,]\f$.
 *
 * This allows to efficiently compute a weight taking into account all permutations over identical
 * objects in the final state. A dimension is added to the integration, and this extra dimension controls
 * which permutation is considered for the rest of the computation. That way, the integrator automatically
 * spends more time on those permutations giving the largest contribution to the final result.
 *
 * ### Integration dimension
 *
 * This module adds **1** dimension to the integration.
 *
 * ### Inputs
 *
 *   | Name | Type | %Description |
 *   |------|------|--------------|
 *   | `ps_point` | double | Phase-space point generated by CUBA. |
 *   | `inputs` | vector(LorentzVector) | Set of input particles to be permutated |
 *
 * ### Outputs
 *
 *   | Name | Type | %Description |
 *   |------|------|--------------|
 *   | `output` | double | Permutated set of input particles |
 *
 * \ingroup modules
 */
class Permutator: public Module {
    public:

        Permutator(PoolPtr pool, const ParameterSet& parameters): Module(pool, parameters.getModuleName()) {

            m_ps_point = get<double>(parameters.get<InputTag>("ps_point"));

            auto particle_tags = parameters.get<std::vector<InputTag>>("inputs");
            for (auto& t: particle_tags)
                m_inputs.push_back(get<LorentzVector>(t));

            std::vector<uint32_t> tmp(m_inputs.size());
            std::iota(tmp.begin(), tmp.end(), 0);

            do {
                perm_indices.push_back(tmp);
            } while (std::next_permutation(tmp.begin(), tmp.end()));

            (*m_output).resize(m_inputs.size());
        };

        virtual Status work() override {
            double psPoint = *m_ps_point;
            
            size_t chosen_perm = std::lround(psPoint * (perm_indices.size() - 1));
            
            for (size_t i = 0; i < m_inputs.size(); i++)
                (*m_output)[i] = *m_inputs[perm_indices[chosen_perm][i]];

            return Status::OK;
        }

        virtual size_t dimensions() const override {
            return 1;
        }

    private:
        std::vector<std::vector<uint32_t>> perm_indices;

        // Inputs
        Value<double> m_ps_point;
        std::vector<Value<LorentzVector>> m_inputs;

        // Outputs
        std::shared_ptr<std::vector<LorentzVector>> m_output = produce<std::vector<LorentzVector>>("output");
};
REGISTER_MODULE(Permutator);

