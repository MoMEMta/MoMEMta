#! /usr/bin/env python

"""
Embed lua files into C++ source files
"""

import argparse
import datetime
import glob
import os
import re

def create_valid_identifier(v):
    """
    Remove any invalid characters from argument and replace them with
    an underscore to create a valid C++ identifier
    """
    i = re.sub('[^0-9a-zA-Z_]', '_', v)

    # Remove leading characters until we find a letter or underscore
    return re.sub('^[^a-zA-Z_]+', '', i)

HEADER = r"""/**
* This code is auto-generated by embedLua.py. Any modifications will be lost
* when the code is re-compiled.
*
* Auto-generated on {}
*/

#include <momemta/Logging.h>
#include <lua/utils.h>

#include <string>

#include <lua.hpp>

""".format(datetime.datetime.now())

EXECUTE_CODE = r"""
    if (luaL_dostring(L, {0}.c_str())) {{
        std::string error = lua_tostring(L, -1);
        LOG(fatal) << "Failed to parse lua code in {0}: " << error;
        throw lua::invalid_configuration_file(error);
    }}
"""

parser = argparse.ArgumentParser(description='Create a C++ source file containing lua code.')
parser.add_argument('-i', '--input', type=str, required=True, help='Input folder where lua files are located')
parser.add_argument('-o', '--output', type=str, required=True, help='Name of the output file.')

args = parser.parse_args()

lua_files = glob.glob(os.path.join(args.input, "*.lua"))

# Create output directory if it's not existing
output_folder = os.path.dirname(os.path.abspath(args.output))
if not os.path.exists(output_folder):
    os.makedirs(output_folder)

with open(args.output, 'w') as output:
    output.write(HEADER)

    variables = []
    for lua_file in lua_files:
        # Create valid C++ identifier from the file name
        variable = os.path.basename(lua_file)
        variable = create_valid_identifier(variable)
        variables.append(variable)

        output.write('const std::string {} = R"(\n'.format(variable))
        with open(lua_file) as f:
            output.write(f.read())
        output.write(')";\n\n')

    # Now write footer
    output.write("void execute_embed_lua_code(lua_State* L) {\n")
    for variable in variables:
        output.write(EXECUTE_CODE.format(variable))
    output.write("}")
